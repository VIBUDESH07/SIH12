pipeline {
    agent any

    environment {
        NODEJS_HOME = tool 'nodejs-23'  // Ensure NodeJS is installed in Jenkins
        PATH = "${NODEJS_HOME}/bin:${env.PATH}"
        IMAGE_NAME = "my-react-app"      // Docker image name
        CONTAINER_NAME = "react-container"
        DOCKER_PASSWORD = "040705"        // Docker password
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: true]], 
                    submoduleCfg: [],
                    userRemoteConfigs: [[url: 'https://github.com/VIBUDESH07/SIH12.git']]
                ])
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Build') {
            steps {
                sh 'npm run build'
            }
        }

        stage('Test') {
            steps {
                sh 'npm test -- --passWithNoTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh "echo '${DOCKER_PASSWORD}' | sudo -S docker build -t ${IMAGE_NAME} ."
                }
            }
        }

        stage('Stop and Remove Existing Container') {
            steps {
                script {
                    // Stop and remove the existing container if running
                    sh """
                    if [ \$(sudo docker ps -q -f name=${CONTAINER_NAME}) ]; then
                        echo '${DOCKER_PASSWORD}' | sudo -S docker stop ${CONTAINER_NAME}
                        echo '${DOCKER_PASSWORD}' | sudo -S docker rm ${CONTAINER_NAME}
                        
                        # Wait until the container is fully removed
                        while [ \$(sudo docker ps -a -q -f name=${CONTAINER_NAME}) ]; do
                            echo "Waiting for container to be removed..."
                            sleep 2
                        done
                        echo "Container removed successfully."
                    fi
                    """
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // Run the Docker container
                    sh """
                    echo '${DOCKER_PASSWORD}' | sudo -S docker run -d -p 3000:80 --name ${CONTAINER_NAME} ${IMAGE_NAME}
                    """
                }
            }
        }

        stage('Verify Container Running') {
            steps {
                script {
                    // Verify if the container is running
                    sh """
                    if sudo docker ps | grep -q ${CONTAINER_NAME}; then
                        echo "✅ Container ${CONTAINER_NAME} is running."
                    else
                        echo "❌ Failed to start container."
                        exit 1
                    fi
                    """
                }
            }
        }
    }
}
